{"ast":null,"code":"var _jsxFileName = \"E:\\\\github\\\\MinecraftTrades\\\\client\\\\src\\\\components\\\\TraderTable.js\";\nimport React, { useDebugValue, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TraderTable = props => {\n  const {\n    traderList\n  } = props;\n  const DisplayData = traderList === null || traderList === void 0 ? void 0 : traderList.map((trader, index) => {\n    // what i need: create N rows for trade.wants.length.   get a want and give of trade[n] and pass in td of want[n] and gives[n] within each generated row.\n    // how it works right now, for each trader, return 1 row, then map the wants and generate a td until no more wants. same with gives, then makes new row.\n    // this process is incorrect. this is basically a display all. similar to original html version. good, but not quite.\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: trader.trades.wants.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              src: item.itemImageUrl,\n              children: item.itemName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"BR-Text\",\n              children: item.itemCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 10\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }, this);\n      })\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this);\n  }); // try a different loop function here to get all table data.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trades centerTable\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tablewrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" insert image of trader here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"wants\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"gives\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_c = TraderTable;\nexport default TraderTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TraderTable\");","map":{"version":3,"sources":["E:/github/MinecraftTrades/client/src/components/TraderTable.js"],"names":["React","useDebugValue","useEffect","useState","axios","useParams","TraderTable","props","traderList","DisplayData","map","trader","index","trades","wants","item","itemImageUrl","itemName","itemCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAACC,IAAAA;AAAD,MAAeD,KAArB;AACA,QAAME,WAAW,GAAGD,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEE,GAAZ,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACxD;AAEA;AACA;AAEE,wBACC;AAAA,gBAIED,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoBJ,GAApB,CAAwB,CAACK,IAAD,EAAOH,KAAP,KAAiB;AACzC,4BACC;AAAA,iCACG;AAAA,oCACC;AAAM,cAAA,GAAG,EAAEG,IAAI,CAACC,YAAhB;AAAA,wBAA+BD,IAAI,CAACE;AAApC;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAM,cAAA,SAAS,EAAC,SAAhB;AAAA,wBAA2BF,IAAI,CAACG;AAAhC;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADH,WAASN,KAAT;AAAA;AAAA;AAAA;AAAA,gBADD;AAQA,OATA;AAJF,OAASA,KAAT;AAAA;AAAA;AAAA;AAAA,YADD;AA4BA,GAlCmB,CAApB,CAF8B,CAqC/B;;AAGC,sBACC;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACC;AAAA,+BACC;AAAA,iCACC;AAAA,oCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAkBA,CA1DD;;KAAMN,W;AA4DN,eAAeA,WAAf","sourcesContent":["import React, { useDebugValue, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from 'react-router-dom';\r\nconst TraderTable = (props) => {\r\n\tconst {traderList} = props;\r\n\tconst DisplayData = traderList?.map((trader, index) => {\r\n// what i need: create N rows for trade.wants.length.   get a want and give of trade[n] and pass in td of want[n] and gives[n] within each generated row.\r\n\r\n// how it works right now, for each trader, return 1 row, then map the wants and generate a td until no more wants. same with gives, then makes new row.\r\n// this process is incorrect. this is basically a display all. similar to original html version. good, but not quite.\r\n\r\n\t\treturn (\r\n\t\t\t<tr key={index}>\r\n\r\n\t\t{/* cannot map an object, only array. */}\r\n\r\n\t\t\t\t{trader.trades.wants.map((item, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<td key={index}>\r\n\t\t\t\t\t\t\t\t\t<div >\r\n\t\t\t\t\t\t\t\t\t\t<div  src={item.itemImageUrl}>{item.itemName}</div>\r\n\t\t\t\t\t\t\t\t\t\t<div  className=\"BR-Text\">{item.itemCount}</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t{/* {trader.trades.gives.map((item, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<td key={index}>\r\n\t\t\t\t\t\t\t\t\t<div >\r\n\t\t\t\t\t\t\t\t\t\t<div  src={item.itemImageUrl}>{item.itemName}</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"BR-Text\">{item.itemCount}</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t})} */}\r\n\t\t\t</tr>\r\n\t\t);\r\n\t});\r\n// try a different loop function here to get all table data.\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"trades centerTable\">\r\n\t\t\t<div className=\"tablewrapper\">\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th> insert image of trader here</th>\r\n\t\t\t\t\t\t\t<th>wants</th>\r\n\t\t\t\t\t\t\t<th>gives</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t{/* {traderList?\r\n\t\t\t\t\t<tbody>{DisplayData}</tbody>\r\n\t\t\t\t\t:null} */}\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TraderTable;\r\n"]},"metadata":{},"sourceType":"module"}